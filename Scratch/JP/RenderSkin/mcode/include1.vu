//==============================================================================
//
//  VU1 Includes
//
//==============================================================================

//
//  NOTES:
//
//  The VU1 memory is split into 4 buffers.
//  Each buffer can store VU1_MAX_VERTS vertices.
//  Each vertex is 3 vectors in size - UV, Color/Normal and Position.
//  Vertices are transferred into the first buffer, and transformed into the next.
//  VIF double buffering is used to toggle between the 1st two buffers and the 2nd two.
//  The VU work mem area is located after the 4 buffers.
//  
//  DMA packets require a quadword count so all transfers are rounded up with ALIGN_16.
//  This means that the VIF may transfer more vectors than is required.
//  For xcolor or s16*2 UV coordinates - a maximum of 3 extra vectors can be transferred.
//  For 8-8-8-bit compressed normals   - a maximum of 5 extra vectors can be transferred.
//  These extra vectors written by the VIF must be taken into account when setting the
//  start of VU work mem.
//
//
//  VU1 Memory Layout
//
//  -----------------------------------------         
//  |                                       |   ]      
//  |               DMA In                  |   ]      
//  |                                       |   ]      
//  -----------------------------------------   ]   Double Buffer 0 
//  |                                       |   ]      
//  |   Transformed Vertices (Kick these)   |   ]      
//  |                                       |   ]      
//  -----------------------------------------   
//  |                                       |   ]      
//  |               DMA In                  |   ]      
//  |                                       |   ]      
//  -----------------------------------------   ]   Double Buffer 1 
//  |                                       |   ]      
//  |   Transformed Vertices (Kick these)   |   ]      
//  |                                       |   ]      
//  -----------------------------------------         
//  |                                       |
//  |              Work Mem                 |
//  |                                       |
//  -----------------------------------------

//==============================================================================
//  Constants
//==============================================================================

#define VU1_MAX_VERTS                60                         // Total number of vertices processed at a time
#define CLIPPER_MEM_SIZE            150                         // Number of vectors needed for clipping

#define VERT_UV                     0
#define VERT_NORM                   1
#define VERT_POS                    2
#define VERT_SIZE                   3
                                    
#define CLIP_FLAG_POS_X             ( 1 << 0 )                  // clip flag bits
#define CLIP_FLAG_NEG_X             ( 1 << 1 )
#define CLIP_FLAG_POS_Y             ( 1 << 2 )
#define CLIP_FLAG_NEG_Y             ( 1 << 3 )
#define CLIP_FLAG_POS_Z             ( 1 << 4 )
#define CLIP_FLAG_NEG_Z             ( 1 << 5 )
                                    
#define CLIP_VERT_FLAGS             ( CLIP_FLAG_POS_X | CLIP_FLAG_NEG_X | CLIP_FLAG_POS_Y | CLIP_FLAG_NEG_Y | CLIP_FLAG_POS_Z | CLIP_FLAG_NEG_Z )
                                    
#define CLIP_TRI_FLAGS              ( CLIP_VERT_FLAGS | ( CLIP_VERT_FLAGS << 6 ) | ( CLIP_VERT_FLAGS << 12 ))
                                    
#define CLIP_TRI_POS_X              ( CLIP_FLAG_POS_X | ( CLIP_FLAG_POS_X << 6 ) | ( CLIP_FLAG_POS_X << 12 ))
#define CLIP_TRI_NEG_X              ( CLIP_FLAG_NEG_X | ( CLIP_FLAG_NEG_X << 6 ) | ( CLIP_FLAG_NEG_X << 12 ))
#define CLIP_TRI_POS_Y              ( CLIP_FLAG_POS_Y | ( CLIP_FLAG_POS_Y << 6 ) | ( CLIP_FLAG_POS_Y << 12 ))
#define CLIP_TRI_NEG_Y              ( CLIP_FLAG_NEG_Y | ( CLIP_FLAG_NEG_Y << 6 ) | ( CLIP_FLAG_NEG_Y << 12 ))
#define CLIP_TRI_POS_Z              ( CLIP_FLAG_POS_Z | ( CLIP_FLAG_POS_Z << 6 ) | ( CLIP_FLAG_POS_Z << 12 ))
#define CLIP_TRI_NEG_Z              ( CLIP_FLAG_NEG_Z | ( CLIP_FLAG_NEG_Z << 6 ) | ( CLIP_FLAG_NEG_Z << 12 ))

//==============================================================================
//  Memory Layout
//==============================================================================

#define VU1_DEST_GIFTAG             ( VU1_MAX_VERTS * VERT_SIZE )
#define VU1_DEST                    ( VU1_DEST_GIFTAG +  1      )

#define VU1_BASE_MEMORY             873
#define CS                          CLIPPER_MEM_SIZE

#define VU1_CLIPPER                 ( VU1_BASE_MEMORY +  0 )    // Start of clipper memory
#define VU1_GIFTAG                  ( VU1_CLIPPER     + CS )    // 1 vector for GIFTag
#define VU1_END                     ( VU1_GIFTAG      +  1 )    // End of VU memory

#if     VU1_END != 1024
#error  VU1 Memory is not properly laid out!
#endif

//=============================================================================
//  Clipper Memory Layout
//=============================================================================

#define REGISTER_STORAGE_SIZE       15                          // Storage for saving and restoring registers
#define PLANE_TABLE_SIZE            7                           // Clip mask and jump addresses
#define BUFFER_SIZE                 (   9 * VERT_SIZE )
#define STRIP_BUFFER_SIZE           (( 12 * VERT_SIZE ) + 1 )

#define CLIPPER_PLANE_TABLE         ( VU1_CLIPPER )             // Plane table used by clipper
#define CLIPPER_REGISTER_STORAGE    ( CLIPPER_PLANE_TABLE      + PLANE_TABLE_SIZE      )
#define CLIPPER_BUFFER0             ( CLIPPER_REGISTER_STORAGE + REGISTER_STORAGE_SIZE )
#define CLIPPER_BUFFER1             ( CLIPPER_BUFFER0          + BUFFER_SIZE           )
#define CLIPPER_STRIP_BUFFER0       ( CLIPPER_BUFFER1          + BUFFER_SIZE           )
#define CLIPPER_STRIP_BUFFER1       ( CLIPPER_STRIP_BUFFER0    + STRIP_BUFFER_SIZE     )
#define CLIPPER_END                 ( CLIPPER_STRIP_BUFFER1    + STRIP_BUFFER_SIZE     )

//==============================================================================
//  Common Registers
//==============================================================================

#define L2S0( x )                   VF01 ## x       // local-to-screen matrix
#define L2S1( x )                   VF02 ## x
#define L2S2( x )                   VF03 ## x
#define L2S3( x )                   VF04 ## x
                                    
#define L2C0( x )                   VF05 ## x       // world-to-clip matrix
#define L2C1( x )                   VF06 ## x
#define L2C2( x )                   VF07 ## x
#define L2C3( x )                   VF08 ## x
                                    
#define C2S0( x )                   VF09 ## x       // clip-to-screen
#define C2S1( x )                   VF10 ## x
#define C2S2( x )                   VF11 ## x
#define C2S3( x )                   VF12 ## x
                                    
#define ITMP                        VI01            // Temporary register
#define VSRC                        VI02            // Source pointer to vertex data
#define TSRC                        VI03            // Source pointer to texture coordinates
#define CSRC                        VI04            // Source pointer to color data
#define NSRC                        VI04            // Source pointer to normal data
                                    
#define DEST                        VI05            // Destination pointer
#define ENDM                        VI06            // End address
#define NUMV                        VI07            // Number of vertices (Temp)

#define BASE                        VI14            // Start of memory

//==============================================================================
//  Fast Renderer Registers
//==============================================================================

#define IXYZ( x )                   VF14 ## x       // Input vertex
#define IRGB( x )                   VF15 ## x       // Input/Output color
#define ITEX( x )                   VF16 ## x       // Input texture coordinates
#define TMP1( x )                   VF17 ## x       // Temporary
#define TMP2( x )                   VF18 ## x       // Temporary
#define OXYZ( x )                   VF19 ## x       // Output vertex
#define OTEX( x )                   VF20 ## x       // Output texture coordinate
#define GTAG( x )                   VF21 ## x       // GIFTag

//==============================================================================
//  Clipper Registers
//==============================================================================

#define Vert0_Comp( x )             VF17 ## x
#define Vert1_Comp( x )             VF18 ## x
                                    
#define Vert0_UV( x )               VF19 ## x       // Texture coordinates
#define Vert0_Col( x )              VF20 ## x       // Color RGBA
#define Vert0_Pos( x )              VF21 ## x       // Position in clip space
                                      
#define Vert1_UV( x )               VF22 ## x       // Texture coordinates
#define Vert1_Col( x )              VF23 ## x       // Color RGBA
#define Vert1_Pos( x )              VF24 ## x       // Position in clip space
                                      
#define Vert2_UV( x )               VF25 ## x       // Texture coordinates
#define Vert2_Col( x )              VF26 ## x       // Color RGBA
#define Vert2_Pos( x )              VF27 ## x       // Position in clip space
                                      
#define Vert3_UV( x )               VF28 ## x       // Texture coordinates
#define Vert3_Col( x )              VF29 ## x       // Color RGBA
#define Vert3_Pos( x )              VF30 ## x       // Position in clip space
                                      
#define FTemp( x )                  VF31 ## x       // Temporary register

#define TEX0(x)                     Vert0_UV( x )   // Shorter versions of the above!
#define TEX1(x)                     Vert1_UV( x )
#define TEX2(x)                     Vert2_UV( x )
#define COL0(x)                     Vert0_Col( x )
#define COL1(x)                     Vert1_Col( x )
#define COL2(x)                     Vert2_Col( x )
#define POS0(x)                     Vert0_Pos( x )
#define POS1(x)                     Vert1_Pos( x )
#define POS2(x)                     Vert2_Pos( x )
#define FTMP(x)                     FTemp( x )

#define VertSourceBuffer            VI03            // All these registers are saved/restored
#define VertSourceAddr              VI04
#define VertSourceCount             VI05
#define VertDestBuffer              VI06
#define VertDestAddr                VI07
#define VertDestCount               VI08
#define PlaneAddr                   VI09
#define PlaneClipMask               VI10
#define PlaneCheckMask              VI11
#define StripDestAddr               VI12

#define ITemp                       VI01
#define ClipResults                 VI01
#define SwapTemp                    VI01

#define ClipperReturnAddr           VI15

//==============================================================================
//  Slow Renderer Registers
//==============================================================================

#define ADCBit( x )                 VF14 ## x       // bit 15 (ADC) set in register
#define TPOS( x )                   VF15 ## x       // Projected screen coordinate
#define TTEX( x )                   VF16 ## x       // Projected texture coordinate
#define TADC( x )                   Vert0_Comp(x)   // ADC bit for current vertex

#define CLIP                        VI13

//=============================================================================

